/*

Gathering point for the definitions of all packets generated by the program that can be sent over the network.

Having these defined only once (the program is a hybrid client/server) prevents errors due to differing definitions.

All communication takes place using UDP

*/

#pragma once

#include <windows.h>

#define WM_SOCKET WM_APP + 1

namespace NetDefs
{
	const extern u_short cServerPort;
	//Huge number used to be relatively sure the packet was created by an instance of this application.
	//Not dwesigned with security in mind, just to lower the chance of accidentally treating a network packet 
	//sent to an instance of this application by unrelated programs as a valid communication
	const extern UINT cMagicNo;
	const extern char cMsgConnect;
	const extern char cMsgConnAck;
	const extern char cMsgStatCom;
	const extern char cMsgStillAlive;

#pragma pack(1)

	//Sent from client to server to request connection.
	//If a server instance receives this it will start sending status updates to the originating IP address and port
	//while starting a countdown: if this reaches zero the server considers the client disconnected
	struct MsgConnectStr
	{
		MsgConnectStr();
		char PacketType;
		UINT MagicNo;
	};

	//Header of the status update packet sent to connected clients at regular intervals.
	//If a client does not receiev one within a time limit (reset every tiem a new one is received) it considers the
	//server no longer reachable, stops running in client mode and notifies the user.
	struct MsgStatComHeaderStr
	{
		MsgStatComHeaderStr();
		char PacketType;
		float TimeVal;
		UCHAR NumEnts;
	};

	//Holds the status of an entity in the simulation
	//As many of these as there are entities in the simulation are appended after the previous structure (which contains their number)
	//To create the actual network packet sent to connected clients for a status update.
	struct EntNetDataStr
	{
		UCHAR Type;
		UCHAR ID;
		float Pos[2]; 
		float Vel[2];
		float Acc[2];
	};

	//Sent back to server at regular intervals to communicate the client is still connected.
	//Causes the server to reset the countdown for the associated client.
	struct MsgStillAliveStr
	{
		MsgStillAliveStr();
		char PacketType;
		UINT MagicNo;
	};

#pragma pack()
};